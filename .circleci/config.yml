# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  test:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: google/cloud-sdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/ksw-school-scrape

    steps:
      - checkout

      - run: |
          echo $GCLOUD_SERVICE_KEY_FILE | gcloud auth activate-service-account --key-file=-
          gcloud --quiet config set project ${GOOGLE_PROJECT_ID}

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            apt-get install python3-venv
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python -m pytest --cov=hohgwuhn test/ --cov-report term --cov-report html \
              --cov-report xml:test-reports/coverage.xml

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: htmlcov
          destination: htmlcov

      - store_artifacts:
          path: test-reports

  ##### Cloud Function deploys
  deploy_fetch:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/ksw-school-scrape
    steps:
      - checkout
      - run: |
          echo $GOOGLE_APPLICATION_CREDENTIALS | gcloud auth activate-service-account --key-file=-
          gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
          gcloud functions deploy fetchData --runtime python37 --trigger-topic hoh-gwuhn-scrape --memory 128

  deploy_geocode:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/ksw-school-scrape
    steps:
      - checkout
      - run: |
          echo $GOOGLE_APPLICATION_CREDENTIALS | gcloud auth activate-service-account --key-file=-
          gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
          gcloud functions deploy geocodeFile --runtime python37 --trigger-resource pandelyon-hoh-gwuhn-fetch --memory 128 --trigger-event google.storage.object.finalize --timeout 540

  deploy_etl:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/ksw-school-scrape
    steps:
      - checkout
      - run: |
          echo $GOOGLE_APPLICATION_CREDENTIALS | gcloud auth activate-service-account --key-file=-
          gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
          gcloud functions deploy geoETL --runtime python37 --trigger-resource pandelyon-hoh-gwuhn-geocode --memory 128 --trigger-event google.storage.object.finalize --timeout 540

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - test
      - deploy_fetch:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy_geocode:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy_etl:
          requires:
            - test
          filters:
            branches:
              only: master
